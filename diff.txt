diff --git a/source/Security/SessionManagement.rst b/source/Security/SessionManagement.rst
index a9f13ad..6a7734f 100644
--- a/source/Security/SessionManagement.rst
+++ b/source/Security/SessionManagement.rst
@@ -133,7 +133,10 @@ How to use
 
 ここではURL Rewriting機能を無効化し、Cookieを使用してセッションIDを連携する方法を説明する。、
 
-また、Spring SecurityはURL Rewritingを無効化するための仕組みも提供しており、この機能はデフォルトで適用されている。
+Spring SecurityによるURL Rewriting機能の無効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+Spring SecurityはURL Rewritingを無効化するための仕組みを提供しており、この機能はデフォルトで適用されている。
 Cookieを使えないクライアントをサポートする必要がある場合は、URL Rewritingを許可するようにBean定義する。
 
 * \ ``spring-security.xml``\ の定義例
@@ -153,41 +156,42 @@ Cookieを使えないクライアントをサポートする必要がある場
       - | Spring Securityのデフォルトでは、\ ``disable-url-rewriting``\ の値は \ ``true``\であるため、URL Rewritingは行われない。
         | URL Rewritingを有効にする際は、\ ``<sec:http>``\ 要素の \ ``disable-url-rewriting``\ 属性に\ ``false``\ を設定する。
 
-.. note:: **コラム**
+サーブレットコンテナによるURL Rewriting機能の無効化
+""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
 
-    Servlet 3.0以上のサーブレットコンテナを使う場合は、Servletの標準仕様の仕組みを使ってセッションをセキュアに扱うことが可能である。
+サーブレットコンテナを使う場合は、Servletの標準仕様の仕組みを使ってセッションをセキュアに扱うことが可能である。
 
-    * \ ``web.xml``\ の定義例
+* \ ``web.xml``\ の定義例
 
-        .. code-block:: xml
+    .. code-block:: xml
 
-            <session-config>
-                <cookie-config>
-                    <http-only>true</http-only> <!-- (1)  -->
-                </cookie-config>
-                <tracking-mode>COOKIE</tracking-mode> <!-- (2) -->
-            </session-config>
+        <session-config>
+            <cookie-config>
+                <http-only>true</http-only> <!-- (1)  -->
+            </cookie-config>
+            <tracking-mode>COOKIE</tracking-mode> <!-- (2) -->
+        </session-config>
 
 
-        .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
-        .. list-table::
-            :header-rows: 1
-            :widths: 10 90
+    .. tabularcolumns:: |p{0.10\linewidth}|p{0.90\linewidth}|
+    .. list-table::
+        :header-rows: 1
+        :widths: 10 90
 
-            * - 項番
-              - 説明
-            * - | (1)
-              - | Cookieに\ ``HttpOnly``\ 属性を付与する場合は、\ ``<http-only>``\ 要素に\ ``true``\ を指定する。
-                | 使用するアプリケーションサーバによっては、デフォルト値が\ ``true``\ になっている。
-            * - | (3)
-              - | URL Rewriting機能を無効化する場合は、\ ``<tracking-mode>``\ 要素に\ ``COOKIE``\ を指定する。
+        * - 項番
+          - 説明
+        * - | (1)
+          - | Cookieに\ ``HttpOnly``\ 属性を付与する場合は、\ ``<http-only>``\ 要素に\ ``true``\ を指定する。
+            | 使用するアプリケーションサーバによっては、デフォルト値が\ ``true``\ になっている。
+        * - | (3)
+          - | URL Rewriting機能を無効化する場合は、\ ``<tracking-mode>``\ 要素に\ ``COOKIE``\ を指定する。
 
-        上記の定義例からは省略しているが、\ ``<cookie-config>``\ に \ ``<secure>true</secure>``\を追加することで、 Cookieに\ ``Secure``\ 属性を付与することができる。
-        ただし、cookieのsecure化は、\ ``web.xml``\ で指定するのではなく、クライアントとHTTPS通信を行うミドルウェア(SSLアクセラレータやWebサーバーなど)で付与する方法を検討されたい。
+    上記の定義例からは省略しているが、\ ``<cookie-config>``\ に \ ``<secure>true</secure>``\を追加することで、 Cookieに\ ``Secure``\ 属性を付与することができる。
+    ただし、cookieのsecure化は、\ ``web.xml``\ で指定するのではなく、クライアントとHTTPS通信を行うミドルウェア(SSLアクセラレータやWebサーバーなど)で付与する方法を検討されたい。
 
-        実際のシステム開発の現場において、ローカルの開発環境でHTTPSを使うケースはほとんどない。
-        また、本番環境においても、HTTPSを使うのはSSLアクセラレータやWebサーバーとの通信までで、アプリケーションサーバへの通信はHTTPで行うケースも少なくない。
-        このような環境下で\ ``Secure``\ 属性の指定を\ ``web.xml``\ で行ってしまうと、実行環境毎に\ ``web.xml``\ や\ ``web-fragment.xml``\ を用意することになり、ファイルの管理が煩雑になるため推奨されない。
+    実際のシステム開発の現場において、ローカルの開発環境でHTTPSを使うケースはほとんどない。
+    また、本番環境においても、HTTPSを使うのはSSLアクセラレータやWebサーバーとの通信までで、アプリケーションサーバへの通信はHTTPで行うケースも少なくない。
+    このような環境下で\ ``Secure``\ 属性の指定を\ ``web.xml``\ で行ってしまうと、実行環境毎に\ ``web.xml``\ や\ ``web-fragment.xml``\ を用意することになり、ファイルの管理が煩雑になるため推奨されない。
 
 
 .. _SpringSecuritySessionManagementSetup:
